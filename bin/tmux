#!/usr/bin/env node
"use strict";

const net = require('net');
const os = require('os');
const path = require('path');
const { spawn } = require('child_process');

const SOCKET_PATH = path.join(os.homedir(), '.ntmuxd.sock');

function ensureDaemon(cb) {
  const sock = net.connect(SOCKET_PATH);
  sock.once('connect', () => { sock.end(); cb(); });
  sock.once('error', () => {
    // Start daemon
    const daemonPath = path.join(__dirname, 'ntmuxd');
    const child = spawn(process.execPath, [daemonPath], {
      detached: true,
      stdio: 'ignore',
    });
    child.unref();
    // Wait briefly
    setTimeout(cb, 150);
  });
}

function rpc(req) {
  return new Promise((resolve, reject) => {
    const sock = net.connect(SOCKET_PATH);
    let data = '';
    sock.setEncoding('utf8');
    sock.on('connect', () => sock.write(JSON.stringify(req) + '\n'));
    sock.on('data', (chunk) => { data += chunk; });
    sock.on('end', () => {
      const line = data.trim().split('\n').pop();
      try { resolve(JSON.parse(line)); } catch (e) { reject(e); }
    });
    sock.on('error', reject);
  });
}

function parseArgs(argv) {
  const [cmd, ...rest] = argv.slice(2);
  return { cmd, rest };
}

async function main() {
  ensureDaemon(async () => {
    const { cmd, rest } = parseArgs(process.argv);
    try {
      if (cmd === 'list-sessions') {
        const res = await rpc({ cmd: 'list-sessions' });
        if (!res.ok) process.exit(1);
        const fmtIdx = rest.indexOf('-F');
        let fmt = fmtIdx !== -1 ? rest[fmtIdx + 1] : '#{session_name}';
        for (const s of res.sessions) {
          let line = fmt;
          line = line.replace(/#\{session_name\}/g, s.session_name)
                     .replace(/#\{session_created_string\}/g, s.session_created_string)
                     .replace(/#\{session_path\}/g, s.session_path);
          process.stdout.write(line + '\n');
        }
        process.exit(0);
      }

      if (cmd === 'new-session') {
        const nameIdx = rest.indexOf('-s');
        const xIdx = rest.indexOf('-x');
        const yIdx = rest.indexOf('-y');
        const name = nameIdx !== -1 ? rest[nameIdx + 1] : 'session';
        const cols = xIdx !== -1 ? parseInt(rest[xIdx + 1], 10) : 120;
        const rows = yIdx !== -1 ? parseInt(rest[yIdx + 1], 10) : 30;
        const detached = rest.includes('-d');
        const res = await rpc({ cmd: 'new-session', name, cols, rows, cwd: process.cwd(), detached });
        process.exit(res.ok ? 0 : 1);
      }

      if (cmd === 'capture-pane') {
        const tIdx = rest.indexOf('-t');
        const sIdx = rest.indexOf('-S');
        const includeEscapes = rest.includes('-e');
        const start = sIdx !== -1 ? parseInt(rest[sIdx + 1], 10) : null;
        const target = tIdx !== -1 ? rest[tIdx + 1] : null;
        const res = await rpc({ cmd: 'capture-pane', target, start, includeEscapes });
        if (!res.ok) process.exit(1);
        process.stdout.write(res.data || '');
        process.exit(0);
      }

      if (cmd === 'resize-window' || cmd === 'resize-pane') {
        const tIdx = rest.indexOf('-t');
        const xIdx = rest.indexOf('-x');
        const yIdx = rest.indexOf('-y');
        const target = tIdx !== -1 ? rest[tIdx + 1] : null;
        const cols = xIdx !== -1 ? parseInt(rest[xIdx + 1], 10) : undefined;
        const rows = yIdx !== -1 ? parseInt(rest[yIdx + 1], 10) : undefined;
        const res = await rpc({ cmd: 'resize-window', target, cols, rows });
        process.exit(res.ok ? 0 : 1);
      }

      if (cmd === 'kill-session') {
        const tIdx = rest.indexOf('-t');
        const target = tIdx !== -1 ? rest[tIdx + 1] : null;
        const res = await rpc({ cmd: 'kill-session', target });
        process.exit(res.ok ? 0 : 1);
      }

      if (cmd === 'has-session') {
        const tIdx = rest.indexOf('-t');
        const target = tIdx !== -1 ? rest[tIdx + 1] : null;
        const res = await rpc({ cmd: 'has-session', target });
        process.exit(res.ok ? 0 : 1);
      }

      if (cmd === 'display' && rest[0] === '-p') {
        const tIdx = rest.indexOf('-t');
        const target = tIdx !== -1 ? rest[tIdx + 1] : null;
        const format = rest.find((a) => a.startsWith('#{')) || '#{session_name}';
        const res = await rpc({ cmd: 'display-p', target, format });
        if (!res.ok) process.exit(1);
        process.stdout.write(res.data + '\n');
        process.exit(0);
      }

      process.stderr.write('Unsupported tmux command in this shim\n');
      process.exit(2);
    } catch (e) {
      process.exit(1);
    }
  });
}

main();


